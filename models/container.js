const defaultParams = {
  size: 40,
  clearance: 0.5,
  cornerRadius: 4,
}

/** @typedef { typeof import("replicad") } replicadLib */
/** @type {function(replicadLib, typeof defaultParams): any} */
function main(replicad, params) {
  const { drawRoundedRectangle, draw } = replicad
  const { size, clearance, cornerRadius } = params

  const base = drawRoundedRectangle(size - clearance, size - clearance, cornerRadius)

  const profile = draw().line(5, 5).line(2, 3).hLine(-2).vLine(-1).bulgeArcTo([0, 1], 0.2).done()

  return profileBox(replicad, profile, base)
}

function profileBox(replicad, inputProfile, base) {
  const { makeSolid, makeFace, assembleWire, EdgeFinder } = replicad

  const start = inputProfile.blueprint.firstPoint
  const profile = inputProfile.translate(-start[0], -start[1])

  const end = profile.blueprint.lastPoint

  const baseSketch = base.sketchOnPlane()

  // We create the side of the box
  const side = baseSketch.clone().sweepSketch(
    (plane) => {
      return profile.sketchOnPlane(plane)
    },
    {
      withContact: true,
    },
  )

  // We put all the pieces together
  return makeSolid([
    side,
    // The face generated by sweeping the end of the profile
    makeFace(assembleWire(new EdgeFinder().inPlane('XY', end[1]).find(side))),
    // The face generated by the base
    baseSketch.face(),
  ])
}
